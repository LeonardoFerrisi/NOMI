# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'nomigui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QComboBox
from src.music_maker import MUSICMAKER
from threading import Thread

#TODO: pygame swap with better alternative to audio stimuli
#TODO: STOP function for GUI

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(797, 409)
        MainWindow.setWindowIcon(QtGui.QIcon('logo_icon.png'))
        MainWindow.setStyleSheet("background-color: lightgrey;")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 60, 771, 301))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")



        self.stateBox = QtWidgets.QComboBox(self.centralwidget)
        self.stateBox.setStatusTip("")
        self.stateBox.setObjectName("stateBox")
        self.stateBox.addItem("") # set the two spaces
        self.stateBox.addItem("")
        self.gridLayout.addWidget(self.stateBox, 2, 2, 1, 1)

        # set default state to concentration
        # index1 = self.stateBox.findText("Concentration", QtCore.Qt.MatchFixedString)  # gets the item from the comboBox (concentration is index 0)

        # find stateBox value
        self.con = 0
        self.relx = 0
        self.lineEdit = QtWidgets.QLineEdit(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit.sizePolicy().hasHeightForWidth())
        self.lineEdit.setSizePolicy(sizePolicy)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout.addWidget(self.lineEdit, 2, 0, 1, 1)

        # self.checkBox = QtWidgets.QCheckBox(self.gridLayoutWidget)
        # sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        # sizePolicy.setHorizontalStretch(0)
        # sizePolicy.setVerticalStretch(0)
        # sizePolicy.setHeightForWidth(self.checkBox.sizePolicy().hasHeightForWidth())
        # self.checkBox.setSizePolicy(sizePolicy)
        # self.checkBox.setObjectName("checkBox")
        # self.gridLayout.addWidget(self.checkBox, 2, 0, 1, 1)

        self.currentBrainState = 0

        self.startOpenBCIButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.startOpenBCIButton.setObjectName("OPENBCI Button")
        self.startOpenBCIButton.setText("Start w/ OpenBCI")
        self.gridLayout.addWidget(self.startOpenBCIButton, 1, 0, 1, 1)
        self.startOpenBCIButton.clicked.connect(self.startOpenBCIAction)

        self.startSynthButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.startSynthButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.startSynthButton, 1, 1, 1, 1)
        self.startSynthButton.clicked.connect(self.startAction)

        self.startMuseButton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.startMuseButton.setObjectName("museButton")
        self.startMuseButton.setText("Start w/ MUSE2")
        self.gridLayout.addWidget(self.startMuseButton, 1, 2, 1, 1)
        self.startMuseButton.clicked.connect(self.startMuseAction)

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(80, 10, 661, 51))
        font = QtGui.QFont()
        font.setFamily("OCR A Extended")
        font.setPointSize(22)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 797, 21))
        self.menubar.setObjectName("menubar")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        # self.actionGithub = QtWidgets.QAction(MainWindow)
        # self.actionGithub.setObjectName("actionGithub")
        # self.actionDocumentation = QtWidgets.QAction(MainWindow)
        # self.actionDocumentation.setObjectName("actionDocumentation")
        # self.menuHelp.addAction(self.actionGithub)
        # self.menuHelp.addAction(self.actionDocumentation)
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.stateBox.setCurrentIndex(0)



    def checkStateBox(self):
        if self.stateBox.currentText() == 'Concentration':
            self.currentBrainState=1
        elif self.stateBox.currentText() == 'Relaxation':
            self.currentBrainState=0
        elif self.stateBox.currentText() == 'Emotion':
            self.currentBrainState=2
        else:
            raise Exception("BRAIN STATE NOT RECOGNIZED")


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "NOMI version 1.4 [BETA]"))
        self.stateBox.setItemText(0, _translate("MainWindow", "Concentration"))
        self.stateBox.setItemText(1, _translate("MainWindow", "Relaxation"))
        self.stateBox.setItemText(2, _translate("MainWindow", "Emotion"))
        
        # self.stopButton.setText(_translate("MainWindow", "Stop"))

        self.lineEdit.setPlaceholderText(_translate("MainWindow", "Enter Serial Port if Using"))

        # self.checkBox.setText(_translate("MainWindow", "Serial Port [Do not check if using Synthetic]"))
        # self.hardwareDropdown = QComboBox()
        # self.hardware_dropdown.setPlaceholderText('Select hardware')
        # self.hardware_dropdown.addItems(['openBCI', 'Muse', 'Synthetic'])
        # self.hardwareDropdown.setItemText(0, _translate("MainWindow", "OpenBCI [Cyton]"))
        # self.hardwareDropdown.setItemText(1, _translate("MainWindow", "MUSE2 "))
        # self.hardwareDropdown.setItemText(2, _translate("MainWindow", "Synthetic"))
        self.startSynthButton.setText(_translate("MainWindow", "Start w/ Synth"))
        self.label_2.setText(_translate("MainWindow", "NEURALLY OPERATED MUSICAL INSTRUMENT"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        # self.actionGithub.setText(_translate("MainWindow", "Github"))
        # self.actionDocumentation.setText(_translate("MainWindow", "Documentation"))

    def startAction(self):
        # run action code
        self.checkStateBox()
        brainState = self.currentBrainState
        #TODO: remove
        if brainState==2:
            raise Exception("Emotion detection still under construction")
        instrument = MUSICMAKER(-1, brainStateVal=brainState)
        instrument.start()
        instrument.loadWav()
        runThread1 = Thread(target=instrument.brainAnalyzer)
        runThread1.start()

    def startOpenBCIAction(self):
        self.checkStateBox()
        print("DEFAULT OPENBCI PORT IS COM3, ENTER IN TEXT BOX TO CHANGE")
        inputSerial = 'COM3'
        if self.lineEdit.text()!='':
            inputSerial = self.lineEdit.text()

        brainState = self.currentBrainState
        instrument = MUSICMAKER(0, inputSerial, brainStateVal=brainState)
        instrument.start()
        instrument.loadWav()
        runThread1 = Thread(target=instrument.brainAnalyzer)
        runThread1.start()

    def startMuseAction(self):
        self.checkStateBox()
        print("DEFAULT PORT IS COM3, ENTER IN TEXT BOX TO CHANGE")
        inputSerial = 'COM3'
        if self.lineEdit.text() != '':
            inputSerial = self.lineEdit.text()

        brainState = self.currentBrainState
        instrument = MUSICMAKER(22, inputSerial, brainStateVal=brainState)
        instrument.start()
        instrument.loadWav()
        runThread1 = Thread(target=instrument.brainAnalyzer)
        runThread1.start()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
